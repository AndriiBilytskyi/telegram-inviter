import asyncio
import json
import os
import re
import time
from telethon import TelegramClient, events
from telethon.tl.functions.channels import InviteToChannelRequest
from telethon.tl.functions.contacts import ResolveUsernameRequest

# === –í–ê–®–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
API_ID = 26735008
API_HASH = '6c35a6247e6b6502e5b79173b22af871'
SESSION_NAME = 'inviter_session'
GROUPS_TO_PARSE = [
    '@NRWanzeigen', '@ukraineingermany1', '@ukrainians_in_germany1',
    '@berlin_ukrainians', '@jobinde', '@hamburg_ukrainians', '@UA_in_Germany',
    '@dusseldorfukrain', '@GermanyTop1', '@germany_chatik'
]
KEYWORDS = [
    '–∞–¥–≤–æ–∫–∞—Ç', '–∞–¥–≤–æ–∫–∞—Ç–∞', '—é—Ä–∏—Å—Ç', '—é—Ä–∏—Å—Ç–∞', '–ø–æ–º–æ—â—å –∞–¥–≤–æ–∫–∞—Ç–∞', 'lawyer', 'anwalt'
]
YOUR_GROUP = 'advocate_ua_1'  # –í–∞—à–∞ –≥—Ä—É–ø–ø–∞ –¥–ª—è –∏–Ω–≤–∞–π—Ç–æ–≤
USERS_FILE = 'users_to_invite.json'

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
def normalize(text):
    return re.sub(r'[^\w\s]', '', text.lower()).strip()

async def parse_users(client):
    users_set = set()

    for group in GROUPS_TO_PARSE:
        print(f"–ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {group}")
        async for message in client.iter_messages(group, limit=1000):
            if message.sender_id and message.text:
                normalized_text = normalize(message.text)
                if any(kw in normalized_text for kw in KEYWORDS):
                    users_set.add(message.sender_id)
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.sender_id}")

    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(users_set), f, ensure_ascii=False, indent=2)

    print(f"üìù –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(users_set)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def invite_users(client):
    if not os.path.exists(USERS_FILE):
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        return

    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)

    try:
        target_group = await client.get_entity(YOUR_GROUP)
    except:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –≥—Ä—É–ø–ø—ã.")
        return

    invited_today = 0

    for user_id in users[:]:
        if invited_today >= 50:
            print("üìÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç 50 –∏–Ω–≤–∞–π—Ç–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
            break

        try:
            await client(InviteToChannelRequest(target_group, [user_id]))
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–≥–ª–∞—à–µ–Ω")
            users.remove(user_id)
            invited_today += 1
            time.sleep(60)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏ (1 –º–∏–Ω—É—Ç–∞)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {user_id}: {e}")
            users.remove(user_id)
            continue

    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

    print(f"üöÄ –ò–Ω–≤–∞–π—Ç—ã –∑–∞–∫–æ–Ω—á–µ–Ω—ã, –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")

async def main():
    client = TelegramClient(SESSION_NAME, API_ID, API_HASH)
    await client.start()

    print("1 ‚Äî –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n2 ‚Äî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

    if action == '1':
        await parse_users(client)
    elif action == '2':
        await invite_users(client)
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    asyncio.run(main())
