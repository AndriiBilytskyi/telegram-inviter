import asyncio
import json
import os
import re
import time
from telethon import TelegramClient
from telethon.errors import UserPrivacyRestrictedError, UserAlreadyParticipantError, FloodWaitError
from telethon.tl.functions.channels import InviteToChannelRequest

# === Telegram Limits ===
MAX_INVITES_PER_DAY = 20
MAX_MESSAGES_PER_DAY = 5
DELAY_BETWEEN_ACTIONS = 120  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

# === –ê–∫–∫–∞—É–Ω—Ç—ã ===
ACCOUNTS = [
    {
        "session": "inviter_session_1",
        "api_id": 26735008,
        "api_hash": "6c35a6247e6b6502e5b79173b22af871"
    },
    {
        "session": "inviter_session_2",
        "api_id": 20903513,
        "api_hash": "0eb01bf47aeac4cbfd89fff140a4e06d"
    }
]

GROUPS_TO_PARSE = [
    '@NRWanzeigen', '@ukraineingermany1', '@ukrainians_in_germany1',
    '@berlin_ukrainians', '@deutscheukraine', '@ukraincifrankfurt',
    '@jobinde', '@hamburg_ukrainians', '@UkraineinMunich',
    '@workeuropeplus', '@UA_in_Germany', '@dusseldorfukrain',
    '@TruckingNordrheinWestfalen', '@Berlin_UA2025', '@bonn_help',
    '@GermanyTop1', '@germany_chatik', '@nrw_anzeige', '@bochum_ua',
    '@POZITYV_PUTESHESTVIYA', '@uahelpkoelnanzeigen', '@cologne_help',
    '@TheGermany1', '@germania_migranty', '@GLOBUSEXPRESS',
    '@nashipomogut', '@reklamnaia_ploshadka', '@ukr_de_essen',
    '@solingen_UA', '@keln_baraholka', '@baraholkaNRW',
    '@ukraine_dortmund', '@ukrainischinDortmund', '@UADuesseldorf',
    '@beauty_dusseldorf', '@pomoshukraineaachen', '@AhlenNRW',
    '@alsdorfua', '@aschafenburg', '@NA6R_hilft', '@bad4ua',
    '@badenbaden_lkr', '@kreiskleve', '@Bernkastel_Wittlich',
    '@bielefeldhelps', '@ukraine_bochum_support', '@uahelp_ruhrgebiet',
    '@DeutschlandBottrop', '@BS_UA_HELP', '@refugeesbremen',
    '@Bruchsal_Chat', '@Ukrainians_in_Calw', '@hilfe_ukraine_chemnitz',
    '@cottbus_ua', '@hamburg_ukraine_chat', '@Magdeburg_ukrainian',
    '@Fainy_Kiel', '@ukraine_in_Hanover', '@uahelfen_arbeit',
    '@bremen_hannover_dresden', '@ukraine_in_dresden', '@BavariaLife',
    '@ErfurtUA', '@save_ukraine_de_essen', '@MunchenBavaria',
    '@refugees_help_Koblenz', '@KaiserslauternUA', '@Karlsruhe_Ukraine',
    '@MunchenGessenBremen', '@chatFreiburg', '@Pfaffenhofen',
    '@deutschland_diaspora', '@Manner_ClubNRW', '@Ukrainer_in_Deutschland',
    '@Ukrainer_in_Wuppertal', '@ukrainians_in_hamburg_ua', '@ukrainians_berlin',
    '@berlinhelpsukrainians', '@Bayreuth_Bamberg'
]

KEYWORDS = [
    '–∞–¥–≤–æ–∫–∞—Ç', '–∞–¥–≤–æ–∫–∞—Ç–∞', '–∞–¥–≤–æ–∫–∞—Ç–æ–º', '–∞–¥–≤–æ–∫–∞—Ç—É',
    '—é—Ä–∏—Å—Ç', '—é—Ä–∏—Å—Ç–∞', '—é—Ä–∏—Å—Ç—É', '—é—Ä–∏—Å—Ç–æ–º',
    '–ø–æ–º–æ—â—å –∞–¥–≤–æ–∫–∞—Ç–∞', '–ø–æ–ª–∏—Ü–∏—è', '–ø—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞',
    '–ø–æ–ª—ñ—Ü—ñ—è', '–ø—Ä–æ–∫—É—Ä–æ—Ä',
    'lawyer', 'attorney', 'police', 'prosecutor', 'court',
    'anwalt', 'rechtsanwalt', 'polizei', 'staatsanwalt', 'gericht'
]

YOUR_GROUP = 'advocate_ua_1'
USERS_FILE = 'users_to_invite.json'
INVITE_MESSAGE = "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –∞–¥–≤–æ–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–∫—Ä–∞–∏–Ω—Ü–∞–º –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –ü—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π —Å–∞–π—Ç: https://andriibilytskyi.com ‚Äî –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"

async def invite_users_with_fallback():
    for account in ACCOUNTS:
        client = TelegramClient(account["session"], account["api_id"], account["api_hash"])
        await client.start()
        print(f"üöÄ –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é: {account['session']}")

        try:
            await process_invites(client)
            break  # –£—Å–ø–µ—à–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        except FloodWaitError as e:
            print(f"‚è≥ FloodWait: Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–∞—É–∑—É {e.seconds} —Å–µ–∫. –ñ–¥—ë–º...")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account['session']}: {e}")
        finally:
            await client.disconnect()

async def process_invites(client):
    if not os.path.exists(USERS_FILE):
        print("‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return

    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)

    group = await client.get_entity(YOUR_GROUP)
    invited = 0
    messaged = 0

    for user in users[:]:
        if invited >= MAX_INVITES_PER_DAY and messaged >= MAX_MESSAGES_PER_DAY:
            print("‚õîÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç")
            break

        try:
            if user.get("username"):
                entity = await client.get_input_entity(f"@{user['username']}")
            else:
                entity = await client.get_input_entity(user['id'])

            if invited < MAX_INVITES_PER_DAY:
                await client(InviteToChannelRequest(group, [entity]))
                print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à—ë–Ω: {user['id']}")
                invited += 1
            else:
                raise UserPrivacyRestrictedError(None)

        except UserPrivacyRestrictedError:
            if messaged < MAX_MESSAGES_PER_DAY and user.get("username"):
                try:
                    await client.send_message(f"@{user['username']}", INVITE_MESSAGE)
                    print(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: @{user['username']}")
                    messaged += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {user['id']}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {user['id']} ‚Äî {e}")

        users.remove(user)
        await asyncio.sleep(DELAY_BETWEEN_ACTIONS)

    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

    print(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {invited} –∏–Ω–≤–∞–π—Ç–æ–≤, {messaged} —Å–æ–æ–±—â–µ–Ω–∏–π")

if __name__ == "__main__":
    asyncio.run(invite_users_with_fallback())
