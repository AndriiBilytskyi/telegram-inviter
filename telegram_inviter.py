import asyncio
import json
import os
import re
import time
from telethon import TelegramClient
from telethon.errors import UserPrivacyRestrictedError, UserAlreadyParticipantError, FloodWaitError
from telethon.tl.functions.channels import InviteToChannelRequest

# === Telegram Limits ===
MAX_INVITES_PER_DAY = 20
MAX_MESSAGES_PER_DAY = 5
DELAY_BETWEEN_ACTIONS = 120  # —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏

# === –ê–∫–∫–∞—É–Ω—Ç—ã ===
ACCOUNTS = [
    {
        "session": "inviter_session_1",
        "api_id": 26735008,
        "api_hash": "6c35a6247e6b6502e5b79173b22af871"
    },
    {
        "session": "inviter_session_2",
        "api_id": 20903513,
        "api_hash": "0eb01bf47aeac4cbfd89fff140a4e06d"
    }
]

GROUPS_TO_PARSE = [ ... ]  # –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º

KEYWORDS = [ ... ]  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º

YOUR_GROUP = 'advocate_ua_1'
USERS_FILE = 'users_to_invite.json'
INVITE_MESSAGE = "üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –∞–¥–≤–æ–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–∫—Ä–∞–∏–Ω—Ü–∞–º –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –ü—Ä–∏–≥–ª–∞—à–∞—é –≤–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å –º–æ–π —Å–∞–π—Ç: https://andriibilytskyi.com ‚Äî –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å!"

async def parse_users(client):
    users_dict = {}
    for group in GROUPS_TO_PARSE:
        print(f"üì° –ü–∞—Ä—Å–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {group}")
        try:
            async for message in client.iter_messages(group, limit=1000):
                if message.sender_id and message.text:
                    text = re.sub(r'[^\w\s]', '', message.text.lower())
                    if any(kw in text for kw in KEYWORDS):
                        sender = await message.get_sender()
                        uid = sender.id
                        if uid not in users_dict:
                            users_dict[uid] = {"id": uid, "username": sender.username}
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {uid} @{sender.username or '‚Äî'}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {group}: {e}")

    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_dict)}")

    if users_dict:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(list(users_dict.values()), f, ensure_ascii=False, indent=2)

        try:
            print("üì§ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å users_to_invite.json –≤ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ...")
            await client.send_file('me', USERS_FILE, caption="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω–≤–∞–π—Ç–∞")
            print("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Saved Messages")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
    else:
        print("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω.")

async def process_invites(client):
    if not os.path.exists(USERS_FILE):
        print("‚ùå –§–∞–π–ª users_to_invite.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)

    group = await client.get_entity(YOUR_GROUP)
    invited = 0
    messaged = 0

    for user in users[:]:
        if invited >= MAX_INVITES_PER_DAY and messaged >= MAX_MESSAGES_PER_DAY:
            print("‚õîÔ∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç")
            break

        try:
            entity = None
            if user.get("username"):
                entity = await client.get_input_entity(f"@{user['username']}")
            else:
                entity = await client.get_input_entity(user['id'])

            if invited < MAX_INVITES_PER_DAY:
                await client(InviteToChannelRequest(group, [entity]))
                print(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à—ë–Ω: {user['id']}")
                invited += 1
            else:
                raise UserPrivacyRestrictedError(None)

        except UserPrivacyRestrictedError:
            if messaged < MAX_MESSAGES_PER_DAY and user.get("username"):
                try:
                    await client.send_message(f"@{user['username']}", INVITE_MESSAGE)
                    print(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: @{user['username']}")
                    messaged += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {user['id']}: {e}")
        except UserAlreadyParticipantError:
            print(f"‚û°Ô∏è –£–∂–µ –≤ –≥—Ä—É–ø–ø–µ: {user['id']}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {user['id']} ‚Äî {e}")

        users.remove(user)
        await asyncio.sleep(DELAY_BETWEEN_ACTIONS)

    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

    print(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {invited} –∏–Ω–≤–∞–π—Ç–æ–≤, {messaged} —Å–æ–æ–±—â–µ–Ω–∏–π")

AUTO_MODE = os.getenv("BOT_MODE", "parse")

async def main():
    for account in ACCOUNTS:
        client = TelegramClient(account["session"], account["api_id"], account["api_hash"])
        await client.start()
        print(f"üöÄ –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é: {account['session']}")

        try:
            if AUTO_MODE == "parse":
                print("‚ñ∂Ô∏è –†–µ–∂–∏–º: –ü–ê–†–°–ò–ù–ì")
                await parse_users(client)
            elif AUTO_MODE == "invite":
                print("‚ñ∂Ô∏è –†–µ–∂–∏–º: –ò–ù–í–ê–ô–¢")
                await process_invites(client)
            else:
                print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: {AUTO_MODE}")
            break
        except FloodWaitError as e:
            print(f"‚è≥ FloodWait: Telegram —Ç—Ä–µ–±—É–µ—Ç –ø–∞—É–∑—É {e.seconds} —Å–µ–∫. –ñ–¥—ë–º...")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º {account['session']}: {e}")
        finally:
            await client.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
